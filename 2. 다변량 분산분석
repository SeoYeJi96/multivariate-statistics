# -SAS

1. **일변량 분산분석**
- 예제 데이터로 roots 데이터를 사용한다.
- roots 데이터는 6종류(stock)의 사과나무의 성장성을 비교하기 위하여 각각 8그루씩 꺽꽂이 나무의 뿌리줄기(rootstock)를 심은 후 비교하였다.

      $y_1:$ 4년 후 줄기 둘레$(mm\times100)$

      $y_2:$ 4년 후 자란 길이$(m)$

      $y_3:$ 15년 후 줄기 둘레$(mm\times100)$

      $y_4:$ 15년 후 지상 부분의 무게$(lb\times100)$

$\Rightarrow$ 6종류의 사과나무는 성장성에 차이가 있는가?
```sass
proc import datafile = 'C:\Users\samsung\Desktop\roots.csv' out = 
roots
dbms = csv replace;
    getnames = yes;
    guessingrows = 10;
run;

proc print data = roots (obs = 10);
run;
```

- proc means를 이용한 평균 추정을 통해 대략적인 평균 차이를 확인한다.
```sass
proc means data = roots;
   var girth4 growth girth15 weight;
   by stock;
run;
```

- proc univariate를 이용하여 평균을 추정하고 박스 그림을 그린다.
```sass
proc univariate data= roots plot;
    var girth4 growth girth15 weight;
    by stock;
run;
```

- proc anova를 이용한 분산분석은 다음과 같이 수행한다.
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
run;
```

- proc anova에서 means 옵션을 통해 박스 그림 및 종류별 평균을 쉽게 확인할 수 있다.
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
    means stock;
run;
```

- proc glm을 이용한 분산분석도 proc anova와 마찬가지로 수행할 수 있다. $\Rightarrow$ 같은 결과
```sass
proc glm data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
run;
```

- 먼저 hovtest의 결과를 통해 등분산성을 검정하고, 등분산 가정이 만족하지 않는다면 Welch’s anova 검정을 통해 분산 분석을 수행한다.
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
    means stock / hovtest welch;
run;
```

2. **다변량 분산분석**
- 일변량 분산분석과 마찬가지로 proc anova와 proc glm을 통해 다변량 분산분석을 수행할 수 있다.
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
    manova h = stock;
run;
```

- printe옵션을 통해 오차제곱합 행렬(모집단 내의 제곱합)을 출력
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
    manova h = stock / printe;
run;
```

- printh옵션을 통해 처리제곱합 행렬(모집단 간의 제곱합)을 출력
```sass
proc anova data = roots;
class stock;
model girth4 growth girth15 weight = stock;
manova h = stock / printh;
run;
```

- printe, printh 옵션을 모두 작성하면 오차제곱합 행렬과 처리제곱합 행렬 모두 출력
```sass
proc anova data = roots;
    class stock;
    model girth4 growth girth15 weight = stock;
    manova h = stock / printh printe;
run;
```

# -R
1. **일변량 분산분석**
- 필요패키지 불러오기
```r
library(dplyr)
library(ggplot2)
library(tidyr)
library(gridExtra)
```

- roots 데이터 불러오기
```r
## outpath는 미리 지정한 저장경로
roots <- read.csv(paste0(outpath, "roots.csv"), header = TRUE
```

- aggregate()를 이용하여 STOCK별로 평균 확인
```r
roots$STOCK <- as.factor(roots$STOCK)
STOCK<-roots$STOCK
y<-with(roots,cbind(GIRTH4,GROWTH,GIRTH15,WEIGHT))
aggregate(y,by=list(STOCK=STOCK),mean)
```

- geom_boxplot()을 이용하여 boxplot 그리기
```r
roots$STOCK <- as.factor(roots$STOCK)
boxplot_plot1 <- ggplot(roots, aes(x = STOCK, y = GIRTH4, fill = STOCK)) +
geom_boxplot() + labs(title = "Distribution of GIRTH4",x = "STOCK",y = "GIRTH4") +theme_gray()

boxplot_plot2 <- ggplot(roots, aes(x = STOCK, y = GROWTH, fill = STOCK)) +
geom_boxplot() + labs(title = "Distribution of GROWTH",x = "STOCK",y = "GROWTH") +theme_gray()

boxplot_plot3 <- ggplot(roots, aes(x = STOCK, y = GIRTH15, fill = STOCK)) +
geom_boxplot() + labs(title = "Distribution of GIRTH15",x = "STOCK",y = "GIRTH15") +theme_gray()

boxplot_plot4 <- ggplot(roots, aes(x = STOCK, y = WEIGHT, fill = STOCK)) +
geom_boxplot() + labs(title = "Distribution of WEIGHT",x = "STOCK",y = "WEIGHT") +theme_gray()

grid.arrange(boxplot_plot1,boxplot_plot2,boxplot_plot3,boxplot_plot4, ncol = 2, nrow=2)
```

- summary.aov()를 이용하여 각 종속변수에 대한 일변량 분산분석 수행
```r
y<-with(roots,cbind(GIRTH4,GROWTH,GIRTH15,WEIGHT))
fit<-manova(y~STOCK,data=roots)
summary.aov(fit)
```

- STOCK별 GIRTH4,GROWTH,GIRTH15,WEIGHT의 평균과 표준편차 확인
```r
roots_summary <- roots %>%group_by(STOCK) %>%
summarise(count_STOCK = n(),mean_girth4 = mean(GIRTH4),
mean_growth = mean(GROWTH),mean_girth15 = mean(GIRTH15),
mean_weight = mean(WEIGHT),sd_girth4 = sd(GIRTH4),
sd_growth = sd(GROWTH),sd_girth15 = sd(GIRTH15),
sd_weight = sd(WEIGHT))
roots_summary
```

- 등분산성 검정
```r
anova(lm((GIRTH4 - ave(GIRTH4, STOCK))^2 ~ STOCK, data = roots))
anova(lm((GROWTH - ave(GROWTH, STOCK))^2 ~ STOCK, data = roots))
anova(lm((GIRTH15 - ave(GIRTH15, STOCK))^2 ~ STOCK, data = roots))
anova(lm((WEIGHT - ave(WEIGHT, STOCK))^2 ~ STOCK, data = roots))
```

- 등분산 가정이 만족하지 않는다면 Welch’s anova 검정 수행
```r
oneway.test(GIRTH4~STOCK, data = roots, var.equal = FALSE)
oneway.test(GROWTH~STOCK, data = roots, var.equal = FALSE)
oneway.test(GIRTH15~STOCK, data = roots, var.equal = FALSE)
oneway.test(WEIGHT~STOCK, data = roots, var.equal = FALSE)
```

2. **다변량 분산분석**
- 다변량 분산분석 검정통계량 출력
```r
fit<-manova(cbind(GIRTH4,GROWTH,GIRTH15,WEIGHT)~STOCK,data=roots)
summary(fit,test='Wilks')
summary(fit,test='Pillai')
summary(fit,test='Hotelling')
summary(fit,test='Roy')
```

- 오차제곱합 행렬(모집단 내의 제곱합) 출력
```r
residuals <- residuals(fit)
error_matrix <- t(residuals) %*% residuals
error_matrix
```

- 처리제곱합 행렬(모집단 간의 제곱합) 출력
```r
n=length(roots$GIRTH4)
treat_matrix<-(n-1)*cov(fit$fitted.values)
treat_matrix
```
